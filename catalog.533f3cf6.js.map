{"mappings":"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","sources":["src/js/catalog.js","src/js/container.js"],"sourcesContent":["import './footer.js';\nimport './header.js';\nimport './error.js';\nimport './hero.js';\nimport './modal.js';\nimport './container.js';\nimport './go-top-btn.js';","import axios from \"axios\";\n\nconst keyAuthorization = \"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiI1ZTBiMjA0M2E3YmRlZmRmMTI5ZGViYjc4NGJiZTFmNyIsInN1YiI6IjY0ZDA5ZWY5ODUwOTBmMDBjODdkY2FjYiIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.AoWYcFyuoQyP_ePohi3LRcw4Fp8RAJIbZs-uo4526oA\"\nconst BASE_URL = \"https://api.themoviedb.org/3/\";\nconst searchButton = document.querySelector('.external-button');\nconst searchInput = document.getElementById('searchInput');\nconst trendingContainer = document.getElementById('trendingContainer');\nconst paginationNumBtn = document.querySelector('.pagination-num-btn');\nconst prevPageBtn = document.getElementById('prevPage');\nconst nextPageBtn = document.getElementById('nextPage');\nconst clearButton = document.getElementById('clearButton');\nlet currentPage = 1;\nlet totalPages = 1;\n\nprevPageBtn.addEventListener('click', () => onPageClick(currentPage - 1));\nnextPageBtn.addEventListener('click', () => onPageClick(currentPage + 1));\ndocument.getElementById('sortByYear').addEventListener('change', handleSort);\ndocument.getElementById('sortByGenre').addEventListener('change', handleSort);\n\nsearchButton.addEventListener('click', handleSearch);\nsearchInput.addEventListener('keydown', (event) => {\n    if (event.key === 'Enter') {\n        event.preventDefault();\n        handleSearch(event);\n    }\n});\n\nasync function createMarkup(array) {\n  const markupArray = await Promise.all(array.map(async ({\n    id,\n    genre_ids,\n    poster_path,\n    release_date,\n    title,\n    vote_average,\n  }) => {\n    \n    const genreName = await cardGenres(genre_ids);\n    const year = getYear(release_date);\n\n    return `<li class=\"trends__item trends-box\" id=${id}>\n        <img\n          src=\"https://image.tmdb.org/t/p/original/${poster_path}\"\n          alt=\"${title}\"\n          class=\"trends__photo\"\n          loading=\"lazy\"\n        />\n        <div class=\"trends__description\">\n          <div class=\"trends__info\">\n            <h3 class=\"trends__name\">${title}</h3>\n            <p class=\"trends__ganre\">${genreName}|${year}</p>\n          </div>\n          <div class=\"raiting__body\">\n            <div class=\"rating__active\" style=\"width: ${(vote_average)*10}px\">\n              <div class=\"rating__active__wrapper\">\n                <span class=\"rating__active__color\">★</span>\n                <span class=\"rating__active__color\">★</span>\n                <span class=\"rating__active__color\">★</span>\n                <span class=\"rating__active__color\">★</span>\n                <span class=\"rating__active__color\">★</span>\n              </div>\n            </div>\n          </div>\n        </div>\n      </li>`;\n  }));\n\n  return markupArray.join('');\n}\n\nasync function loadGenre() {\n\n  const response = await axios.get(`${BASE_URL}genre/movie/list`,{\n    headers: {\n      accept: 'application/json',\n          Authorization: keyAuthorization\n    },\n    params: {\n      language: 'en'\n    }\n  })\n  \n  const data = response.data;\n  const genres = data.genres\n  return genres;\n}\nasync function cardGenres(genres) {\n  const defaultGen = \"Nice film\"\n  if(genres.length === 0){\n    return defaultGen;\n  }\n  try {\n    const genresApi =  await loadGenre()\n    const newArr = genresApi.filter((elem=> elem.id === genres[0])).map(el=>el.name).join(\" \")\n    \n    return newArr;\n  } catch (error) {\n    console.log(error.code);\n  }\n  \n}\nfunction getYear(date) {\n  date = date.split(\"-\");\n  return date[0];\n}\n\nasync function populateTrendingMovies(page) {\n    \n    try {\n        const response = await axios.get(`${BASE_URL}trending/movie/day`, {\n            headers: {\n                accept: 'application/json',\n          Authorization: keyAuthorization\n            },\n            params: {\n                language: 'en',\n                page: page\n            }\n        });\n\n        const movies = response.data.results;\n        const markup = await createMarkup(movies);\n\n        const trendingContainer = document.getElementById('trendingContainer');\n        trendingContainer.innerHTML = markup;\n\n        totalPages = response.data.total_pages; // Update total pages\n        updatePaginationButtons(currentPage, totalPages);\n    } catch (error) {\n        console.log(error);\n    }\n}\n\nasync function handleSearch(event) {\n    event.preventDefault();\n\n    const searchInput = document.getElementById('searchInput');\n    const searchQuery = searchInput.value.trim();\n\n    if (searchQuery === '') {\n        return;\n    }\n\n    try {\n        const response = await axios.get(`${BASE_URL}search/movie`, {\n            headers: {\n                accept: 'application/json',\n          Authorization: keyAuthorization\n            },\n            params: {\n                language: 'en',\n                query: searchQuery,\n                page: 1 // Start with page 1\n            }\n        });\n\n        const searchResults = response.data.results;\n        if (searchResults.length === 0) {\n            const markup = `\n            <div class=\"no-results\">\n              <p class=\"text-no-results\">OOPS...</p>\n              <p class=\"text-no-results\">We are very sorry!</p>\n              <p class=\"text-no-results\">\n                We don’t have any results matching your search.\n              </p>\n            </div>`\n            trendingContainer.innerHTML = markup\n          return\n        }\n        const markup = await createMarkup(searchResults);\n        \n        trendingContainer.innerHTML = `<div class=\"results\">${markup}</div>`;\n\n        totalPages = response.data.total_pages; // Update total pages\n        updatePaginationButtons(currentPage, totalPages);\n    } catch (error) {\n        console.log(error.code);\n    }\n}\n\n  searchInput.addEventListener('input', function() {\n            if (searchInput.value.trim() !== '') {\n                clearButton.style.display = 'inline';\n            } else {\n                clearButton.style.display = 'none';\n            }\n        });\n\n        // Add an event listener to the clear button\n        clearButton.addEventListener('click', function() {\n            searchInput.value = '';\n            clearButton.style.display = 'none';\n        });\n// Function to fetch and populate sort options for years and genres\nasync function populateSortOptions() {\n    try {\n        const genres = await loadGenre();\n        const sortByYear = document.getElementById('sortByYear');\n        const sortByGenre = document.getElementById('sortByGenre');\n\n        // Populate sort by year options\n        const currentYear = new Date().getFullYear();\n\n        // Add default option for year\n        const defaultYearOption = document.createElement('option');\n        defaultYearOption.value = '';\n        defaultYearOption.textContent = 'Year';\n        sortByYear.appendChild(defaultYearOption);\n\n        for (let year = currentYear; year >= 1900; year--) {\n            const option = document.createElement('option');\n            option.value = year;\n            option.textContent = year;\n            sortByYear.appendChild(option);\n        }\n\n        // Populate sort by genre options\n        const defaultGenreOption = document.createElement('option');\n        defaultGenreOption.value = '';\n        defaultGenreOption.textContent = 'All';\n        sortByGenre.appendChild(defaultGenreOption);\n\n        for (const genre of genres) {\n            const option = document.createElement('option');\n            option.value = genre.id;\n            option.textContent = genre.name;\n            sortByGenre.appendChild(option);\n        }\n    } catch (error) {\n        console.log(error.code);\n    }\n}\n// Function to handle sorting by year and genre\nasync function handleSort(page) { // Accept page as an argument\n    const sortByYear = document.getElementById('sortByYear');\n    const sortByGenre = document.getElementById('sortByGenre');\n\n    const selectedYear = sortByYear.value;\n    const selectedGenre = sortByGenre.value;\n\n    try {\n        const response = await axios.get(`${BASE_URL}discover/movie`, {\n            headers: {\n                accept: 'application/json',\n                Authorization: keyAuthorization\n            },\n            params: {\n                language: 'en',\n                sort_by: 'popularity.desc',\n                with_genres: selectedGenre,\n                primary_release_year: selectedYear,\n                page: page // Use the passed page argument\n            }\n        });\n\n        const sortedResults = response.data.results;\n        const markup = await createMarkup(sortedResults);\n\n        trendingContainer.innerHTML = markup;\n\n        totalPages = response.data.total_pages; // Update total pages\n        updatePaginationButtons(currentPage, totalPages);\n    } catch (error) {\n        console.log(error.code);\n    }\n}\n\n\n\n// Initialize the page\nasync function initializePage() {\n    await populateSortOptions();\n    onPageClick(currentPage); // Call onPageClick to load trending movies based on default behavior\n}\n\ninitializePage(); // Call this function to initialize the page\n // Call this function to initialize the page\n\nfunction onPageClick(pageNumber) {\n    if (pageNumber < 1 || pageNumber > totalPages) {\n        return;\n    }\n\n    currentPage = pageNumber;\n\n    const sortByYear = document.getElementById('sortByYear');\n    const sortByGenre = document.getElementById('sortByGenre');\n\n    if ((sortByYear.value || sortByGenre.value) && sortByYear.value !== '' && sortByGenre.value !== '') {\n        handleSort(currentPage); // Pass the currentPage to handleSort\n    } else if (searchInput.value.trim() !== '') {\n        handleSearch(); // If searching is active, call handleSearch\n    } else {\n        populateTrendingMovies(currentPage); // Load trending movies if neither sorting nor searching\n    }\n\n    window.scrollTo({ top: trendingContainer.offsetTop, behavior: 'smooth' });\n}\n\n\nfunction updatePaginationButtons(currentPage, totalPages) {\n    paginationNumBtn.innerHTML = ''; // Clear existing buttons\n\n    // Back arrow\n    if (currentPage > 1) {\n        addPageButton(paginationNumBtn, currentPage - 1, 'back');\n    }\n    \n    // Current page\n    addPageButton(paginationNumBtn, currentPage, 'current');\n    \n    // Next page after current page\n    if (currentPage < totalPages) {\n        addPageButton(paginationNumBtn, currentPage + 1, 'next');\n    }\n    \n    // After next page\n    if (currentPage < totalPages - 1) {\n        addPageButton(paginationNumBtn, currentPage + 2);\n    }\n    \n    // Three dots\n    if (currentPage < totalPages - 2) {\n        const morePagesBtn = document.createElement('button');\n        morePagesBtn.classList.add('pagination-btn');\n        morePagesBtn.textContent = '...';\n        paginationNumBtn.appendChild(morePagesBtn);\n    }\n    \n    // 24 page\n    addPageButton(paginationNumBtn, currentPage + 23);\n}\n\nfunction addPageButton(parentElement, pageNum, btnType = '') {\n    const pageBtn = document.createElement('button');\n    pageBtn.classList.add('pagination-cycle-btn');\n    pageBtn.textContent = pageNum < 10 ? `0${pageNum}` : `${pageNum}`;\n    \n    if (btnType === 'current') {\n        pageBtn.classList.add('current-page-btn');\n    }\n\n    pageBtn.addEventListener('click', () => onPageClick(pageNum));\n    parentElement.appendChild(pageBtn);\n}\n\n"],"names":["parcelRequire","$2shzp","$40e353db7164029c$var$keyAuthorization","$40e353db7164029c$var$searchButton","document","querySelector","$40e353db7164029c$var$searchInput","getElementById","$40e353db7164029c$var$trendingContainer","$40e353db7164029c$var$paginationNumBtn","$40e353db7164029c$var$prevPageBtn","$40e353db7164029c$var$nextPageBtn","$40e353db7164029c$var$clearButton","$40e353db7164029c$var$currentPage","$40e353db7164029c$var$totalPages","async","$40e353db7164029c$var$createMarkup","array","Promise","all","map","id","genre_ids","poster_path","release_date","title","vote_average","genres","defaultGen","length","genresApi","$40e353db7164029c$var$loadGenre","filter","elem","el","name","join","error","console","log","code","$40e353db7164029c$var$cardGenres","split","default","get","headers","accept","Authorization","params","language","data","$40e353db7164029c$var$handleSearch","event","preventDefault","searchQuery","value","trim","response","query","page","searchResults","results","markup","innerHTML","total_pages","$40e353db7164029c$var$updatePaginationButtons","$40e353db7164029c$var$handleSort","sortByYear","sortByGenre","selectedYear","selectedGenre","sort_by","with_genres","primary_release_year","sortedResults","$40e353db7164029c$var$onPageClick","pageNumber","movies","$40e353db7164029c$var$populateTrendingMovies","window","scrollTo","top","offsetTop","behavior","currentPage1","totalPages1","$40e353db7164029c$var$addPageButton","morePagesBtn","createElement","classList","add","textContent","appendChild","parentElement","pageNum","btnType","pageBtn","addEventListener","key","style","display","currentYear","Date","getFullYear","defaultYearOption","year","option","defaultGenreOption","genre","$40e353db7164029c$var$populateSortOptions","$40e353db7164029c$var$initializePage"],"version":3,"file":"catalog.533f3cf6.js.map"}