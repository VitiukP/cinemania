{"mappings":"iiBAAA,IAWIA,EAXJC,EAAAC,EAAA,S,aAEMC,G,aAAO,CACTC,KAAOC,SAASC,cAAc,iBAC9BC,QAAUF,SAASC,cAAc,YACjCE,eAAiBH,SAASC,cAAc,uBACxCG,SAAWJ,SAASC,cAAc,mBAIlCI,EAAW,GAGTC,GAAc,EAAAC,EAAAC,QAAOD,EAAAE,MAAQ,GA6CnC,SAASC,EAAYC,GACnB,IAAMC,EAAkBC,EAAAjB,EAAA,CAAGe,GACN,GAAlBC,EAAeE,OAAS,EAGzB,OAFAC,EAAaH,QACbd,EAAKI,QAAQc,UAAUC,IAAI,mBAEzB,IAAMC,EAAWN,EAAeO,MAAM,EAAG,GACpBP,EAARQ,OAAO,EAAE,GACKzB,EAAXkB,EAAAjB,EAAA,CAAGgB,GACrBG,EAAaG,GACbpB,EAAKI,QAAQc,UAAUK,OAAO,mBAC9BvB,EAAKI,QAAQoB,iBAAiB,QAASC,E,CAG3C,SAASA,IACL,GAAG5B,EAAemB,OAAS,EAGvB,OAFAC,EAAapB,QACbG,EAAKI,QAAQc,UAAUC,IAAI,mBAG3BF,EADmBpB,EAAewB,MAAM,EAAG,IAE3CxB,EAAeyB,OAAO,EAAE,E,CAgChC,SAASL,EAAaS,GAClB,IAAMC,EAAuBD,EA5BFE,KAAI,SAAAC,G,IA+BlBC,EA/BoBC,EAAEF,EAAFE,GAAIC,EAAMH,EAANG,OAAQC,EAAWJ,EAAXI,YAAaC,EAAYL,EAAZK,aAAcC,EAAKN,EAALM,MAAOC,EAAYP,EAAZO,aAC/E,MAAM,0CAEiDC,OAFPN,EAAG,oFAGhCM,OADoCJ,EAAY,4BAM1BI,OALtBF,EAAM,wMAMgBE,OADAF,EAAM,sDACYE,OAAlBL,EAAO,GAAGM,KAAK,KAGED,QAkB7CP,EArBsDI,GAsBnEJ,EAAOA,EAAKS,MAAM,MACN,IAvBqE,2IAGLF,OAAH,GAAfD,EAAkB,6gB,IAW3DI,KAAK,KAKtBxC,EAAKC,KAAKwC,mBAAmB,YAAad,E,CAlG9Cf,EAAYJ,GAGRA,GAAgBA,EAAYQ,QAa5BR,EAAYoB,KAAI,SAAAc,G,OAAIA,EAAGV,M,IAAQJ,KAAI,SAAAe,G,OAAIA,EAAGf,KAAI,SAAAc,G,OAAInC,EAASqC,KAAKF,EAAGJ,K,OAChD/B,EAARA,EAASsC,QAAO,SAACH,EAAGI,EAAEC,G,OAAMD,IAAIC,EAAIC,QAAQN,E,IACzCnC,EAKVqB,KAAI,SAAAc,GACJ,IAAMO,EAAS,iCAAoCZ,OAAHK,EAAG,aACnD1C,EAAKM,SAASmC,mBAAmB,YAAYQ,E,IANjDjD,EAAKM,SAASkB,iBAAiB,UAUnC,SAAwB0B,GACpBlD,EAAKC,KAAKkD,UAAY,IACtB,IAAMC,EAAcF,EAAEG,OAAOC,MAC7B,GAAmB,eAAhBF,EAED,YADAxC,EAAYJ,GAOfI,EAHwBJ,EAAYqC,QAAO,SAAAU,GACtC,OAAQA,EAAGvB,OAAOwB,MAAK,SAAAd,G,OAAIA,EAAGJ,KAAKmB,SAASL,E,YAlChDpD,EAAKK,eAAe8C,UAAa,+f","sources":["src/js/library-render.js"],"sourcesContent":["import { loadLs, KEY } from \"./modal\";\nimport { KEY } from \"./modal\";\nconst refs = {\n    ulEl : document.querySelector(\".trends__list\"),\n    btnLoad : document.querySelector(\".js-load\"),\n    myLibContainer : document.querySelector('.js-mylib-container'),\n    searchEl : document.querySelector('#genre-search'),\n}\n\n\nlet genreArr = [];\nlet forCheckRender;\n\nconst filmsFromLs = loadLs(KEY) || [];\n\nlengthCheck(filmsFromLs);\n                              // проверяем и догружаем все фильмы\n\nif(!filmsFromLs || !filmsFromLs.length) {               // перевірка локал сторіджа\n    refs.myLibContainer.innerHTML = `<div class=\"not-found-film-library\">\n    <p class=\"not-found-film-library-text-item\">OOPS...</p>\n    <p class=\"not-found-film-library-text-item\">We are very sorry!</p>\n    <p class=\"not-found-film-library-text-item\">\n      You don’t have any movies at your library.\n    </p>\n    \n    <a class=\"not-found-film-link\" href=\"./catalog.html\"> Search movie </a>\n  </div>\n  <ul class=\"trends__list visually-hidden\"></ul>\n  <button type=\"button\" class=\"load-more js-load visually-hidden\">Load more</button>`\n} else {\n    filmsFromLs.map(el=>el.genres).map(el=>el.map(el=>genreArr.push(el.name)));     // рендер жанрів в селект\n    genreArr = genreArr.filter((el,i,arr)=>i===arr.indexOf(el));\n    renderOptions(genreArr);\n    refs.searchEl.addEventListener('change', onChangeSelect);\n}\n\nfunction renderOptions(arr) {\n    arr.map(el=>{\n        const option = `<option class='mylib-options'>${el}</option>`;\n        refs.searchEl.insertAdjacentHTML('beforeend',option)\n    });\n}\n\nfunction onChangeSelect(e) {\n    refs.ulEl.innerHTML = \" \"\n    const genreToFind = e.target.value;\n    if(genreToFind === 'All Genres'){\n      lengthCheck(filmsFromLs);\n      return\n    }                            // перед ретурном запхати функцію рендера(ретурн залишити!!!!!!!!!!!!!)\n     \n    const filterredFilms = filmsFromLs.filter(el=>{\n        return (el.genres.some(el=>el.name.includes(genreToFind)))\n    })\n   lengthCheck(filterredFilms)              // замінити ретурн на функцію рендера\n}\n\nfunction lengthCheck(obj) {\n  const filmsInCheckFu = [...obj];                     // переменная для проверок\n  if(filmsInCheckFu.length < 9){                       // если фильмов < 9 просто выводим\n    renderMarkup(filmsInCheckFu);\n    refs.btnLoad.classList.add(\"visually-hidden\");\n    return\n    } const toRender = filmsInCheckFu.slice(0, 9);      // если больше выводим первые 9\n    filmsInCheckFu.splice(0,9);                         // берем все фильмы с 9-го удяляя первые 8\n    forCheckRender = [...filmsInCheckFu];              \n    renderMarkup(toRender);\n    refs.btnLoad.classList.remove(\"visually-hidden\");\n    refs.btnLoad.addEventListener(\"click\", onLoadMore);\n}\n\nfunction onLoadMore() {                                  // проверяем и отображаем по нажатию кнопки \n    if(forCheckRender.length < 9){\n        renderMarkup(forCheckRender);\n        refs.btnLoad.classList.add(\"visually-hidden\");\n        return\n        } const toRender = forCheckRender.slice(0, 9);\n        renderMarkup(toRender);\n        forCheckRender.splice(0,9);\n\n}\nfunction renderLibrary(libraryObj) {\n\nconst markupArray = libraryObj.map(({id, genres, poster_path, release_date, title, vote_average}) => {\n    return`<li class=\"library-list trends-box\" id=${id}>\n              <img\n                src=\"https://image.tmdb.org/t/p/original/${poster_path}\"\n                alt=\"${title}\"\n                class=\"trends__photo\"\n              />\n              <div class=\"trends__description\">\n                <div class=\"trends__info\">\n                  <h3 class=\"trends__name\">${title}</h3>\n                  <p class=\"trends__ganre\">${genres[0].name}|${getYear(release_date)}</p>\n                </div>\n                <div class=\"raiting__body\">\n                  <div class=\"rating__active\" style=\"width: ${(vote_average)*10}px\">\n                    <div class=\"rating__active__wrapper\">\n                      <span class=\"rating__active__color\">★</span>\n                      <span class=\"rating__active__color\">★</span>\n                      <span class=\"rating__active__color\">★</span>\n                      <span class=\"rating__active__color\">★</span>\n                      <span class=\"rating__active__color\">★</span>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </li>`}).join(\" \")\n        return markupArray;\n      }\nfunction renderMarkup(array) {\n    const markup = renderLibrary(array);\n    refs.ulEl.insertAdjacentHTML(\"beforeend\", markup);\n  }\nfunction getYear(date) {\n    date = date.split(\"-\");\n    return date[0];\n  }\n"],"names":["$f79e75a7cb2d4ae4$var$forCheckRender","$8nrFW","parcelRequire","$f79e75a7cb2d4ae4$var$refs","ulEl","document","querySelector","btnLoad","myLibContainer","searchEl","$f79e75a7cb2d4ae4$var$genreArr","$f79e75a7cb2d4ae4$var$filmsFromLs","$5xtVg","loadLs","KEY","$f79e75a7cb2d4ae4$var$lengthCheck","obj","filmsInCheckFu","$parcel$interopDefault","length","$f79e75a7cb2d4ae4$var$renderMarkup","classList","add","toRender","slice","splice","remove","addEventListener","$f79e75a7cb2d4ae4$var$onLoadMore","array","markup","map","param","date","id","genres","poster_path","release_date","title","vote_average","concat","name","split","join","insertAdjacentHTML","el","el1","push","filter","i","arr","indexOf","option","e","innerHTML","genreToFind","target","value","el2","some","includes"],"version":3,"file":"myLibrary.f0869964.js.map"}